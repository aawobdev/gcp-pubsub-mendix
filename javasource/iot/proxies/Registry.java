// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package iot.proxies;

public class Registry
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject registryMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "IoT.Registry";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		RegistryId("RegistryId"),
		RegionId("RegionId"),
		Registry_Project("IoT.Registry_Project");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Registry(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "IoT.Registry"));
	}

	protected Registry(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject registryMendixObject)
	{
		if (registryMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("IoT.Registry", registryMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a IoT.Registry");

		this.registryMendixObject = registryMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'Registry.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static iot.proxies.Registry initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return iot.proxies.Registry.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static iot.proxies.Registry initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new iot.proxies.Registry(context, mendixObject);
	}

	public static iot.proxies.Registry load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return iot.proxies.Registry.initialize(context, mendixObject);
	}

	public static java.util.List<iot.proxies.Registry> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<iot.proxies.Registry> result = new java.util.ArrayList<iot.proxies.Registry>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//IoT.Registry" + xpathConstraint))
			result.add(iot.proxies.Registry.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of RegistryId
	 */
	public final java.lang.String getRegistryId()
	{
		return getRegistryId(getContext());
	}

	/**
	 * @param context
	 * @return value of RegistryId
	 */
	public final java.lang.String getRegistryId(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.RegistryId.toString());
	}

	/**
	 * Set value of RegistryId
	 * @param registryid
	 */
	public final void setRegistryId(java.lang.String registryid)
	{
		setRegistryId(getContext(), registryid);
	}

	/**
	 * Set value of RegistryId
	 * @param context
	 * @param registryid
	 */
	public final void setRegistryId(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String registryid)
	{
		getMendixObject().setValue(context, MemberNames.RegistryId.toString(), registryid);
	}

	/**
	 * @return value of RegionId
	 */
	public final java.lang.String getRegionId()
	{
		return getRegionId(getContext());
	}

	/**
	 * @param context
	 * @return value of RegionId
	 */
	public final java.lang.String getRegionId(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.RegionId.toString());
	}

	/**
	 * Set value of RegionId
	 * @param regionid
	 */
	public final void setRegionId(java.lang.String regionid)
	{
		setRegionId(getContext(), regionid);
	}

	/**
	 * Set value of RegionId
	 * @param context
	 * @param regionid
	 */
	public final void setRegionId(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String regionid)
	{
		getMendixObject().setValue(context, MemberNames.RegionId.toString(), regionid);
	}

	/**
	 * @return value of Registry_Project
	 */
	public final gcpiot.proxies.Project getRegistry_Project() throws com.mendix.core.CoreException
	{
		return getRegistry_Project(getContext());
	}

	/**
	 * @param context
	 * @return value of Registry_Project
	 */
	public final gcpiot.proxies.Project getRegistry_Project(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		gcpiot.proxies.Project result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Registry_Project.toString());
		if (identifier != null)
			result = gcpiot.proxies.Project.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Registry_Project
	 * @param registry_project
	 */
	public final void setRegistry_Project(gcpiot.proxies.Project registry_project)
	{
		setRegistry_Project(getContext(), registry_project);
	}

	/**
	 * Set value of Registry_Project
	 * @param context
	 * @param registry_project
	 */
	public final void setRegistry_Project(com.mendix.systemwideinterfaces.core.IContext context, gcpiot.proxies.Project registry_project)
	{
		if (registry_project == null)
			getMendixObject().setValue(context, MemberNames.Registry_Project.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Registry_Project.toString(), registry_project.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return registryMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final iot.proxies.Registry that = (iot.proxies.Registry) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "IoT.Registry";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
