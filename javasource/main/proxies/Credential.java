// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package main.proxies;

public class Credential extends system.proxies.FileDocument
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Main.Credential";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		ProjectId("ProjectId"),
		IsLoaded("IsLoaded"),
		FileID("FileID"),
		Name("Name"),
		DeleteAfterDownload("DeleteAfterDownload"),
		Contents("Contents"),
		HasContents("HasContents"),
		Project_Credential("Main.Project_Credential");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Credential(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "Main.Credential"));
	}

	protected Credential(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject credentialMendixObject)
	{
		super(context, credentialMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("Main.Credential", credentialMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a Main.Credential");
	}

	/**
	 * @deprecated Use 'Credential.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static main.proxies.Credential initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return main.proxies.Credential.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static main.proxies.Credential initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new main.proxies.Credential(context, mendixObject);
	}

	public static main.proxies.Credential load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return main.proxies.Credential.initialize(context, mendixObject);
	}

	public static java.util.List<main.proxies.Credential> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<main.proxies.Credential> result = new java.util.ArrayList<main.proxies.Credential>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//Main.Credential" + xpathConstraint))
			result.add(main.proxies.Credential.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of ProjectId
	 */
	public final java.lang.String getProjectId()
	{
		return getProjectId(getContext());
	}

	/**
	 * @param context
	 * @return value of ProjectId
	 */
	public final java.lang.String getProjectId(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.ProjectId.toString());
	}

	/**
	 * Set value of ProjectId
	 * @param projectid
	 */
	public final void setProjectId(java.lang.String projectid)
	{
		setProjectId(getContext(), projectid);
	}

	/**
	 * Set value of ProjectId
	 * @param context
	 * @param projectid
	 */
	public final void setProjectId(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String projectid)
	{
		getMendixObject().setValue(context, MemberNames.ProjectId.toString(), projectid);
	}

	/**
	 * @return value of IsLoaded
	 */
	public final java.lang.Boolean getIsLoaded()
	{
		return getIsLoaded(getContext());
	}

	/**
	 * @param context
	 * @return value of IsLoaded
	 */
	public final java.lang.Boolean getIsLoaded(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.IsLoaded.toString());
	}

	/**
	 * Set value of IsLoaded
	 * @param isloaded
	 */
	public final void setIsLoaded(java.lang.Boolean isloaded)
	{
		setIsLoaded(getContext(), isloaded);
	}

	/**
	 * Set value of IsLoaded
	 * @param context
	 * @param isloaded
	 */
	public final void setIsLoaded(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean isloaded)
	{
		getMendixObject().setValue(context, MemberNames.IsLoaded.toString(), isloaded);
	}

	/**
	 * @return value of Project_Credential
	 */
	public final main.proxies.Project getProject_Credential() throws com.mendix.core.CoreException
	{
		return getProject_Credential(getContext());
	}

	/**
	 * @param context
	 * @return value of Project_Credential
	 */
	public final main.proxies.Project getProject_Credential(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		main.proxies.Project result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Project_Credential.toString());
		if (identifier != null)
			result = main.proxies.Project.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Project_Credential
	 * @param project_credential
	 */
	public final void setProject_Credential(main.proxies.Project project_credential)
	{
		setProject_Credential(getContext(), project_credential);
	}

	/**
	 * Set value of Project_Credential
	 * @param context
	 * @param project_credential
	 */
	public final void setProject_Credential(com.mendix.systemwideinterfaces.core.IContext context, main.proxies.Project project_credential)
	{
		if (project_credential == null)
			getMendixObject().setValue(context, MemberNames.Project_Credential.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Project_Credential.toString(), project_credential.getMendixObject().getId());
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final main.proxies.Credential that = (main.proxies.Credential) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "Main.Credential";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
