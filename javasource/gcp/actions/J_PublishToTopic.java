// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package gcp.actions;

import java.io.InputStream;
import com.google.api.core.ApiFuture;
import com.google.api.core.ApiFutureCallback;
import com.google.api.core.ApiFutures;
import com.google.api.gax.rpc.ApiException;
import com.google.common.util.concurrent.MoreExecutors;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import gcp.impl.FileHelper;
import gcp.impl.GCPPublisher;
import gcp.impl.Logger;
import gcp.impl.PublishAgent;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class J_PublishToTopic extends CustomJavaAction<java.lang.String>
{
	private IMendixObject __CredentialsFile;
	private system.proxies.FileDocument CredentialsFile;
	private java.lang.String TopicId;
	private java.lang.String Payload;

	public J_PublishToTopic(IContext context, IMendixObject CredentialsFile, java.lang.String TopicId, java.lang.String Payload)
	{
		super(context);
		this.__CredentialsFile = CredentialsFile;
		this.TopicId = TopicId;
		this.Payload = Payload;
	}

	@Override
	public java.lang.String executeAction() throws Exception
	{
		this.CredentialsFile = __CredentialsFile == null ? null : system.proxies.FileDocument.initialize(getContext(), __CredentialsFile);

		// BEGIN USER CODE
		PublishAgent agent = new PublishAgent();
		String projectId = FileHelper.getProjectId(this.getContext(), __CredentialsFile);
		ApiFuture<String> future = null;

		if (agent.getPublisher(TopicId + "-" + projectId) == null)
		{
			agent.initialize();
			InputStream credentialsInputFile = FileHelper.getCredentialsFileStream(this.getContext(),__CredentialsFile);		
			GCPPublisher publisher = new GCPPublisher(TopicId + "-" + projectId, TopicId, projectId,credentialsInputFile );
			agent.pushPub(publisher);
			Logger.debug("Currently loaded: "+agent.getGcpPublishers().size() + " Publishers");
		}
		else
		{
			Logger.info(TopicId + "-" + projectId + " already a publisher");
		}

		try {
			GCPPublisher p = agent.getPublisher(TopicId + "-" + projectId);
			Logger.debug("Publisher: " + p.getPublisherId());

			if(p!=null)
			{
				future = p.publish(Payload);
				ApiFutures.addCallback(
						future,
						new ApiFutureCallback<String>() {

							@Override
							public void onFailure(Throwable throwable) {
								if (throwable instanceof ApiException) {
									ApiException apiException = ((ApiException) throwable);
									// details on the API exception
									Logger.error(apiException.getStatusCode().getCode().toString());
									Logger.error("is Retry: " + apiException.isRetryable());
								}
								Logger.error("Error publishing message : " + Payload);
							}

							@Override
							public void onSuccess(String messageId) {
								// Once published, returns server-assigned message ids (unique within the topic)
								Logger.debug("PUBLISH: Success - " + messageId);
							}
						},
						MoreExecutors.directExecutor());
			}
		}
		catch(Exception e) {
			Logger.error(e.getStackTrace().toString());
		}

		return future.toString();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "J_PublishToTopic";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
